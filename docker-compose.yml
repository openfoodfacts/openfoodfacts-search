version: "3.7"


# base ES service definition
x-base-es-service: &base-es-service
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: ${RESTART_POLICY}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


# shared environment for ES
x-base-es-envs: &base-es-envs
  cluster.name: ${CLUSTER_NAME}
  cluster.initial_master_nodes: es01,es02
  bootstrap.memory_lock: "true"
  xpack.security.enabled: "false"
  xpack.license.self_generated.type: ${LICENSE}
  http.cors.enabled: "true"
  http.cors.allow-origin: http://localhost:8080,http://127.0.0.1:8080
  http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
  http.cors.allow-credentials: "true"


services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: on-failure
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    <<: *base-es-service
    environment:
      <<: *base-es-envs
      node.name: es01
      discovery.seed_hosts: es02

    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200

  es02:
    <<: *base-es-service
    environment:
      <<: *base-es-envs
      node.name: es02
      discovery.seed_hosts: es01
    depends_on:
      - es01
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata02:/usr/share/elasticsearch/data

  # elasticsearch browser
  elasticvue:
      image: cars10/elasticvue
      restart: ${RESTART_POLICY}
      ports:
          - '${ES_VUE_PORT}:8080'

  searchservice:
    image: off_search_image
    restart: ${RESTART_POLICY}
    environment:
      - ELASTICSEARCH_URL=es01:9200
      - REDIS_HOST=searchredis
    ports:
      - '${SEARCH_PORT}:8000'
    networks:
      - default
      - common_net

  searchredis:
    image: redis
    restart: ${RESTART_POLICY}
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - rediscache:/data
    networks:
      - default
      - common_net

volumes:
  certs:
  esdata01:
  esdata02:
  rediscache:

networks:
  common_net:
    name: ${COMMON_NET_NAME}
